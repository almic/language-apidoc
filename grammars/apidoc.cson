scopeName: 'text.apidoc'
# By using the L prefix for comments, we effectively steal parsing from JSDoc, which for some reason specifies @api as a JSDoc tag (although it technically isn't!)
injectionSelector: 'L:comment.block.documentation' # Mimic the TODO package injection, but more friendly
patterns: [
  {
    comment: '@api: Required! Without this indicator, apiDoc parser ignores the block.'
    match: '''(?x)
      (@api)[ \\t]+  # 1

      # Method, 2 & 3
      (?:
        ({(?:  # 2
           get
          |head
          |post
          |put
          |delete
          |connect
          |options
          |trace
          |patch
        )})
        |
        ({[^\\}]*})  # 3
      )

      # Path, 4
      (?:[ \\t]+(?!\\*/)
        (?:(\\S+?)(?=$|\\ |\\t|\\*/))
      )?

      # Title, 5
      (?:[ \\t]+(?!\\*/)
        (?:(.+?)(?=$|\\*/))
      )?
    '''
    captures:
      1:
        name: 'keyword.control.apidoc'
      2:
        name: 'constant.other.apidoc'
      3:
        name: 'invalid.illegal.syntax.apidoc'
      4:
        name: 'support.type.apidoc'
      5:
        name: 'entity.other.attribute-name.id.apidoc'
  }
  {
    comment: '@apiDefine: Defines a documentation block to be embedded.'
    match: '''(?x)
      (@apiDefine)[ \\t]+  # 1

      # Name, 2 & 3
      (?:
        (?:(\\w+)(?=$|\\ |\\t|\\*/))  # 2
        |
        (?:(\\S+?)(?=$|\\ |\\t|\\*/))  # 3
      )

      # Title, 4
      (?:[ \\t]+(?!\\*/)
        (?:(.+?)(?=$|\\*/))
      )?
    '''
    captures:
      1:
        name: 'keyword.control.apidoc'
      2:
        name: 'variable.other.apidoc'
      3:
        name: 'invalid.illegal.syntax.apidoc'
      4:
        name: 'entity.other.attribute-name.id.apidoc'
  }
  {
    comment: '@apiError: Error return parameter'
    begin: '(@apiError)(?=[ \\t]+\\S)(?![ \\t]+\\*/)'
    beginCaptures:
      1:
        name: 'keyword.control.apidoc'
    end: '(?=\\*/|$)'
    patterns: [{
      include: '#param'
    }]
  }
  {
    comment: '@apiExample: Examples of a message or request, output as pre-formatted code.'
    match: '''(?x)
      (@api(?:Error|Header|Param|Success)?Example)[ \\t]+  # 1

      (?!\\*/)(?:(?=\\S)
        # Type, 2
        (?:{[ \\t]*([a-zA-Z0-9./\\\\\\[\\]_-]+)[ \\t]*})?

        # Title, 3
        (?:[ \\t]+(?!\\*/)
          (?:(.+?)(?=$|\\*/))
        )?

        (?=$|\\ |\\t|\\*/)
      )
    '''
    captures:
      1:
        name: 'keyword.control.apidoc'
      2:
        name: 'entity.name.type.apidoc'
      3:
        name: 'entity.other.attribute-name.id.apidoc'
  }
  {
    comment: '@apiGroup: Should always be used. Defines to which group the method document block belongs.'
    match: '''(?x)
      (@apiGroup)[ \\t]+  # 1

      # Name, 2
      (?!\\*/)(?:
        (?:(.+?)(?=$|\\*/))
      )?
    '''
    captures:
      1:
        name: 'keyword.control.apidoc'
      2:
        name: 'variable.other.apidoc'
  }
  {
    comment: '@apiHeader: Describe a parameter passed to your API-Header e.g. for Authorization. Similar operation as @apiParam, only the output is above the parameters.'
    begin: '(@apiHeader)(?=[ \\t]+\\S)(?![ \\t]+\\*/)'
    beginCaptures:
      1:
        name: 'keyword.control.apidoc'
    end: '(?=\\*/|$)'
    patterns: [{
      include: '#param'
    }]
  }
  {
    comment: '@apiName: Should always be used. Defines the name of the mthod documentation block.'
    match: '''(?x)
      (@apiName)[ \\t]+  # 1

      # Name, 2
      (?!\\*/)(?:
        (?:(.+?)(?=$|\\*/))
      )?
    '''
    captures:
      1:
        name: 'keyword.control.apidoc'
      2:
        name: 'variable.other.apidoc'
  }
  {
    comment: '@apiParam: Describe a parameter passed to the API method'
    begin: '(@apiParam)(?=[ \\t]+\\S)(?![ \\t]+\\*/)'
    beginCaptures:
      1:
        name: 'keyword.control.apidoc'
    end: '(?=\\*/|$)'
    patterns: [{
      include: '#param'
    }]
  }
  {
    comment: '@apiPermission: Outputs the permission name. If defined by @apiDefine, then that is generated.'
    match: '''(?x)
      (@apiPermission)[ \\t]+  # 1

      # Name, 2
      (?!\\*/)(?:
        (?:(.+?)(?=$|\\*/))
      )?
    '''
    captures:
      1:
        name: 'keyword.control.apidoc'
      2:
        name: 'variable.other.apidoc'
  }
  {
    comment: '@apiSampleRequest: Use this parameter in conjunction with the apidoc.json config parameter `sampleUrl`.'
    match: '''(?x)
      (@apiSampleRequest)
      [ \\t]+
      (?!\\*/)(?:
        (off) # off disables this if `sampleUrl` is set
        |
        (
          (?:/|https?://)[-a-zA-Z0-9_/:.]*
        )
        |
        (?:
          (\\S+?) # Invalid option capturing
        )
      )(?=$|\\ |\\t|\\*/)
    '''
    captures:
      1:
        name: 'keyword.control.apidoc'
      2:
        name: 'string.quoted.apidoc'
      3:
        name: 'support.type.apidoc'
      4:
        name: 'invalid.illegal.syntax.apidoc'
  }
  {
    comment: '@apiSuccess: Success return parameter.'
    begin: '(@apiSuccess)(?=[ \\t]+\\S)(?![ \\t]+\\*/)'
    beginCaptures:
      1:
        name: 'keyword.control.apidoc'
    end: '(?=\\*/|$)'
    patterns: [{
      include: '#param'
    }]
  }
  {
    comment: '@apiUse: Copies the contents from an @apiDefine block into this block, cannot be used with @apiDefine.'
    match: '''(?x)
      (@apiUse)[ \\t]+  # 1

      # Name, 2
      (?!\\*/)(?:
        (?:(.+?)(?=$|\\*/))
      )?
    '''
    captures:
      1:
        name: 'keyword.control.apidoc'
      2:
        name: 'variable.other.apidoc'
  }
  {
    comment: '@apiVersion: Version for this documentation block. You should seriously be using SemVer on this one, but whateva'
    match: '''(?x)
      (@apiVersion)
      [ \\t]+
      (?!\\*/)(?:
        (
          # Semamtic version regex
          (?:0|[1-9]\\d*)
          \\.
          (?:0|[1-9]\\d*)
          \\.
          (?:0|[1-9]\\d*)
          (?:-
            (?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)
            (?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*
          )?
          (?:\\+
            [0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*
          )?
          (?=$|\\ |\\t|\\*/)
        )
        |
        (?:(\\S+?)(?=$|\\ |\\t|\\*/))
      )
    '''
    captures:
      1:
        name: 'keyword.control.apidoc'
      2:
        name: 'string.quoted.apidoc'
      3:
        name: 'variable.other.apidoc'
  }
  {
    # Highlighting for all tags!
    match: '''(?x)
      (@api
        (?:
          Define
          |Deprecated
          |Description
          |Error(?:Example)?
          |Example
          |Group
          |Header(?:Example)?
          |Ignore
          |Name
          |Param(?:Example)?
          |Permission
          |Private
          |SampleRequest
          |Success(?:Example)?
          |Use
          |Version
        )?
      )(?=$|\\s)
    '''
    name: 'entity.other.apidoc'
    captures:
      1:
        name: 'keyword.control.apidoc'
  }
  {
    # Deprecated highlights
    match: '''(?x)
      ((@)api
        (?:
          Define(?:Error|Header|Success)?Structure
          |DefinePermission
          |(?:Error|Header|Success)?Structure
          |(?:Error|Header|Param|Success)Title
          |GroupDescription
        )
      )(?=$|\\s)
    '''
    name: 'invalid.deprecated.syntax.apidoc'
  }
]
repository:
  param: {
    comment: 'Used for a couple things, absolutely huge regex'
    match: '''(?x)\\G[ \\t]+

    # Group, 1 & 2
    (?:
      (?:(\\([ \\t]*(?:$|\\)))[ \\t]*)  # 1
      |
      (?:(\\([ \\t]*.+?[ \\t]*\\))[ \\t]*)  # 2
    )?

    # Type, 3 4 5 & 6
    (?:
      (?:
        ({[ \\t]*[a-zA-Z0-9\\(\\)#:./\\\\\\[\\]_-]+[ \\t]*  # 3
          # Optional size or allowed values
          (?:
            # Size
            ({[ \\t]*[^\\}]+?[ \\t]*})  # 4
            |
            # Allowed values
            (=[ \\t]*[^\\}]*?[ \\t]*)  # 5
          )?})[ \\t]*
      )
      |
      (?:({[^\\}]*})[ \\t]*)  # 6
    )?

    # Name
    (?:
      (?:
        # Optional
        ([ \\t]*\\[[ \\t]*[a-zA-Z0-9:./\\\\_-]+[ \\t]*
          (=[ \\t]*[^\\]]*?)? # Default
          \\](?=\\s|$)
        )
        |
        # Required
        (?:[ \\t]*([a-zA-Z0-9:./\\\\_-]+)(?=\\s|$))
      )
      |
      ([\\S]+) # Invalid name
    )?

    # No matching for description
    (?=.*?$)
    '''
    captures:
      1: # Invalid group parens
        name: 'invalid.illegal.syntax.apidoc'
      2: # Group name
        name: 'constant.other.apidoc'
      3: # Type
        name: 'entity.name.type.apidoc'
      4: # Size
        name: 'constant.numeric.apidoc'
      5: # Values
        name: 'constant.other.apidoc'
      6: # Invalid type
        name: 'invalid.illegal.syntax.apidoc'
      7: # Optional name
        name: 'variable.other.apidoc'
      8: # Default value
        name: 'string.quoted.apidoc'
      9: # Required name
        name: 'variable.other.apidoc'
      10: # Invalid name
        name: 'invalid.illegal.syntax.apidoc'
  }
